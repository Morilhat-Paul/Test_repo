on:
  push:
    branches:
      - "main"
      - "dev"

env:
  EXECUTABLES: "template, lib/libmy.a, lib/libchained_list.a"

jobs:
#   Check_coding_style:
#     runs-on: ubuntu-latest
#     name: Check for Epitech coding-style
#     continue-on-error: false
#     container:
#       image: ghcr.io/epitech/coding-style-checker:latest
#       volumes:
#         - "coding-style_volume:/volume_mount"
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Coding style
#         run: |
#             check.sh $(pwd) $(pwd)
#             echo "error_style_count=$(wc -l coding-style-reports.log | cut -d" " -f1)" >> "$GITHUB_OUTPUT"
#       - name: show error
#         if: steps.run-coding-style.outputs.error_style_count > 0
#         run: |
#           awk -F":" '{print "::error file="$1",line="$2",title="$3" coding style error::"$4}' coding-style-reports.log
#           exit 1

#   Check_program_compilation:
#     runs-on: ubuntu-latest
#     name: Check if the program compile correctly
#     needs: Check_coding_style
#     continue-on-error: false
#     container:
#       image: epitechcontent/epitest-docker:latest
#       volumes:
#         - "compilation-volume:/volume_mount"
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Chech the program compilation
#         run: make
#         timeout-minutes: 2
#       - name: Check the cleaning
#         run: make clean
#       - name: Check for all executables
#         run: |
#             IFS=", ";
#             for file in $EXECUTABLES; do
#               if [ ! -x "$file" ]; then
#                 echo "$file doesn't exist !"
#                 exit 1
#               fi
#               exit 0
#             done

#   Run_tests:
#     runs-on: ubuntu-latest
#     name: Run all tests
#     needs: Check_program_compilation
#     container:
#       image: epitechcontent/epitest-docker:latest
#       volumes:
#         - "tests-volume:/volume_mount"
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#       - name: Run the unitary tests
#         run: make re tests_run
#         timeout-minutes: 2
#       - name: Run the functional tests
#         run: make re tests_functional
#         timeout-minutes: 2

  Upload_coverage:
    runs-on: ubuntu-latest
    name: Upload the coverage of unit-tests
    needs: Run_tests
    container:
      image: epitechcontent/epitest-docker:latest
      volumes:
        - "tests-volume:/upload_volume_mount"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run the unitary tests
        run: make re tests_run display_test
        timeout-minutes: 2
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./tests/
          flags: unit-tests
          gcov: true
          fail_ci_if_error: true

  Upload_tests:
    runs-on: ubuntu-latest
    name: Upload the passed workflow
    needs:
      - Run_tests
      - Upload_coverage
    container:
      image: epitechcontent/epitest-docker:latest
      volumes:
        - "tests-volume:/upload_volume_mount"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run the unitary tests
        run: make re tests_run display_test
        timeout-minutes: 2

      - name: Upload coverage percentage reports to ReadMe
        run: |
          coverage_branches=$(awk '/TOTAL/ {print substr($NF, 1, length($NF)-1)}' "coverage_branches.txt")
          coverage=$(awk '/TOTAL/ {print substr($NF, 1, length($NF)-1)}' "coverage.txt")
          echo "COVERAGE_BRANCHES=$coverage_branches" >> $GITHUB_ENV
          echo "COVERAGE=$coverage" >> $GITHUB_ENV

      - name: Create Awesome Badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ef0cca4079ae9a36ebea3cbdd3b1c4d4
          filename: coverag_branches.json
          label: Hello
          message: ${{ env.COVERAGE_BRANCHES }}
          valColorRange: ${{ env.COVERAGE_BRANCHES }}
          orangeminColorRange: 50
          maxColorRange: 90
          forceUpdate: true
